#!/bin/bash
#
# Backup Script for LOCAL development websites: files and MySQL databases.
#
# Tested on Ubuntu 16.04 Xenial Xerus.
#
# rsync Options
# -a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
# -v, --verbose               increase verbosity
# -h, --human-readable        output numbers in a human-readable format
# -L, --copy-links            transform symlink into referent file/dir
# -O, --omit-dir-times        omit directories from --times
#
# Add this script to `/usr/local/sbin`, and make it executable. See the `readme.md`
# for instructions.
#
# Before running, create a backup MySQL user with limited privileges - this allows
# you to safely add the MySQL user password in this script, which is essential when
# the script is adapted for use on a public-facing server. See `create-backup-user.sql`
# in this repo for instructions on creating a MySQL backup user.
# ------------------------------------------------------------------------------

# Config
# ------------------------------------------------------------------------------
# Set directory and include config variables
THIS=$(readlink -f ${BASH_SOURCE[0]})
PROJECT_DIR=$(dirname $THIS)
. "$PROJECT_DIR/config"

# NOTICE - you probably don't need to edit below this line
# ------------------------------------------------------------------------------
RETAIN_NUMBER=$(( $NUMBER_TO_KEEP + 2 )) # Correction to account for n+1 and the `current` directory
SRC="${PARENT}/source/" # The source for rsync
STORAGE="${PARENT}/backup" # The storage directory
TIMESTAMP=$(date "+%Y-%m-%d-%H:%M:%S") # Timestamp for directory name:
DB_SRC="${SRC}sql" # Path to the dumped databases - NB this isn't the final destination
TRG="${STORAGE}/${TIMESTAMP}" # The target directory
LNK="${STORAGE}/current" # The link destination directory: Used to compare changes
HOSTNAME=$(hostname)

mkdir -p $SRC # This will also create $PARENT as well if it doesn't exist
mkdir -p $STORAGE # Backup directory
mkdir -p $DB_SRC # Database backup subdirectory
mkdir -p $TRG # Final backup location, subdir of $STORAGE
mkdir -p $LNK # The comparison directory used as the rsync `--link-dest`
ln -s $DOCROOT $SRC # Create a symlink to $DOCROOT in $SRC

# ------------------------------------------------------------------------------
# Dump databases into $PARENT/$SOURCE directory.
# Uses mysqldump, backs up databases individually.
# ------------------------------------------------------------------------------
function dump_databases_into_source {
  # Get an array of databases, but not 'Database' or 'information_schema'
  DATABASES=$(mysql --user=$DB_USER --password=$PASSWORD -e "SHOW DATABASES;" | grep -Ev "(Database|information_schema)")
  DUMPFAIL=false

  # Remove previously dumped databases
  rm $DB_SRC/*
  # Set up a log
  echo "Database backup report. ${TIMESTAMP}" > $DB_SRC/DB_LOG
  echo "=======================================" >> $DB_SRC/DB_LOG

  # Create dumps for each database
  for DB in ${DATABASES}
  do
    mysqldump --user=${DB_USER} --password=${PASSWORD} --single-transaction --host=${HOST} ${DB} > ${DB_SRC}/${DB}.sql
    # Log the result of mysqldump
    if [[ $? -eq 0 ]]
    then
      echo -e "Mysqldump created ${DB}.sql on ${TIMESTAMP}." >> $DB_SRC/DB_LOG
    else
      echo "Mysqldump encountered a problem backing up ${DB} on ${TIMESTAMP}. Look in ${TRG}/sql/${DB}.log for information." >> $DB_SRC/DB_LOG
      $DUMPFAIL=true
    fi
  done
}

# ------------------------------------------------------------------------------
# Rsync the source directory to the backup directory - the last backup used as comparator.
# The rsync options: follow the symlinks to make a hard backup.
# Exclude zip files (otherwise backupbuddy will cause enormous backups)
# ------------------------------------------------------------------------------
function rsync_backup {
  OPT=(-avL --progress --delete --exclude='*.zip' --link-dest=$LNK) # rsync options
  rsync "${OPT[@]}" $SRC $TRG
  true
  # Log Results of Rsync
  if [[ $? -gt 0 ]]
  then
    # rsync Failure condition
    echo "ERROR. rsync didn't complete the proper backup: ${TIMESTAMP}" >> /var/log/server-backup.log
    # Send an email
    echo "There was an error in the backup for ${HOSTNAME}: ${TIMESTAMP}. See /var/log/server-backup.log for more info."| mail -s "Backup Error, ${HOSTNAME}" ${EMAIL}
  else
    # rsync Success condition
    if [[ false == $DUMPFAIL ]]
    then
      # rsync & mysqldump worked OK
      echo "SUCCESS. Backup made on: ${TIMESTAMP}" >> /var/log/server-backup.log
      echo -e "${TIMESTAMP}: Server ${HOSTNAME} successfully ran a local backup.\nBoth rsync & mysqldump report success."| mail -s "Backup Success, ${HOSTNAME}" ${EMAIL}
    else
      # rsync worked but there was at least one mysqldump error
      echo "PARTIAL SUCCESS. File backup (rsync) was successful, but mysqldump reports errors: ${TIMESTAMP}" >> /var/log/server-backup.log
      echo -e "${TIMESTAMP}: Server ${HOSTNAME} ran a local backup.\nFile backup reports success, however mysqldump reports at least one problem.\nCheck ${TRG}/sql for more info."| mail -s "Backup Success, ${HOSTNAME}" ${EMAIL}
    fi
  fi
}

# ------------------------------------------------------------------------------
# Remove the symlink to the target directory from `$STORAGE/current` and add a
# symlink to the most recent copied directory to `$STORAGE/current`.
#
# This allows rsync to use the most recent backup as the `--link-dest` comparison
# on the next run.
#
# See: http://stackoverflow.com/a/34862475
# ------------------------------------------------------------------------------
function setup_for_next_run {
  rm -f $STORAGE/current/*
  ln -s $TRG $STORAGE/current
}

# ------------------------------------------------------------------------------
# Remove old backup directories.
#
# Retains n directories, set in the config area of this script.
# ------------------------------------------------------------------------------
function delete_oldest_n_copies {
  cd $STORAGE
  # Dry Run
  #ls -cpr $STORAGE | head -n +$RETAIN_NUMBER | xargs -d '\n' echo rm -rf --
  ls -cpr $STORAGE | head -n -$RETAIN_NUMBER | xargs -d '\n' rm -rf
}

dump_databases_into_source
rsync_backup
setup_for_next_run
delete_oldest_n_copies
