#!/bin/bash
#
# Backup Script for LOCAL websites: files and MySQL databases.
#
# rsync Options
# -a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
# -v, --verbose               increase verbosity
# -h, --human-readable        output numbers in a human-readable format
# -L, --copy-links            transform symlink into referent file/dir
# -O, --omit-dir-times        omit directories from --times
#
# Locate this script in `/usr/local/sbin`, and make executable. See the `readme.md`
# for instructions.
#
# Before running, create a backup MySQL user with limited privileges - this allows
# you to safely add the MySQL user password in this script. See `create-backup-user.sql`
# in this repo.
# ------------------------------------------------------------------------------

# Setup variables
# ------------------------------------------------------------------------------
# Doc root
DOCROOT="/var/www/html"
# Backup Location
PARENT="/home/david/atest"
# The source for rsync:
SRC="${PARENT}/source/"
# The storage directory:
STORAGE="${PARENT}/backup"
# Timestamp for directory name:
TIMESTAMP=$(date "+%Y-%m-%d-%H:%M:%S")
# Path to the dumped databases - NB this isn't the final destination
DB_SRC="${SRC}sql"
# The target directory:
TRG="${STORAGE}/${TIMESTAMP}"
# The link destination directory: Used to compare changes
LNK="${STORAGE}/current"

# Set up directories if they don't already exist
mkdir -p $SRC # This will create $PARENT as well if it doesn't exist
mkdir -p $STORAGE # Backup directory
mkdir -p $DB_SRC # Database backup subdirectory
mkdir -p $TRG # Final backup location, subdir of $STORAGE
mkdir -p $LNK

ln -s $DOCROOT $SRC

# Local MySQL hostname:
HOST="localhost"

# Backup databases
# ------------------------------------------------------------------------------
USER="backup_user"
PASSWORD="nicelongpassword"
HOST="localhost"
DB_BACKUP_PATH=$DB_SRC

# Get an array of databases, but not 'Database' or 'information_schema'
DATABASES=$(mysql --user=$USER --password=$PASSWORD -e "SHOW DATABASES;" | grep -Ev "(Database|information_schema)")

DUMPFAIL=false

# Remove previous dumped databases
rm $DB_BACKUP_PATH/*

# Set up a log
echo "Database backup report. ${TIMESTAMP}" > $DB_BACKUP_PATH/DB_LOG
echo "=======================================" >> $DB_BACKUP_PATH/DB_LOG

# Create dumps for each database
# ------------------------------------------------------------------------------
for DB in $DATABASES
do

  mysqldump --user=$USER --password=$PASSWORD --single-transaction --host=$HOST $DB > $DB_BACKUP_PATH/$DB.sql

  # Log the result of mysqldump
  if [[ $? -eq 0 ]]

  then

    echo -e "Mysqldump created ${DB}.sql on ${TIMESTAMP}." >> $DB_BACKUP_PATH/DB_LOG

  else

    echo "Mysqldump encountered a problem backing up ${DB} on ${TIMESTAMP}. Look in ${DB_BACKUP_PATH}/${DB}.log for information." >> $DB_BACKUP_PATH/DB_LOG
    $DUMPFAIL=true

  fi

done

# The rsync options: follow the symlinks to make a hard backup
# Exclude zip files (otherwise backupbuddy will cause enormous backups)
# ------------------------------------------------------------------------------
OPT=(-avL --progress --delete --exclude='*.zip' --link-dest=$LNK)

# Execute the backup
# ------------------------------------------------------------------------------

rsync "${OPT[@]}" $SRC $TRG

# Log Results of Rsync
# ------------------------------------------------------------------------------
if [[ $? -gt 0 ]]
then
  # rsync Failure
  echo "ERROR. rsync didn't complete the proper backup: ${TIMESTAMP}" >> /var/log/server-backup.log
  # enable the next line for the server version, or if you've set up a local mailserver
  # echo "There was an error in the nightly backup for XXX: ${TIMESTAMP}"| mail -s "Backup Error, XXX" info@example.com
else
  # rsync Success
  # ----------------------------------------------------------------------------
  if [[ false == $DUMPFAIL ]]

    # rsync & mysqldump worked OK
    # --------------------------------------------------------------------------
    then
      echo "SUCCESS. Backup made on: ${TIMESTAMP}" >> /var/log/server-backup.log
      #echo -e "${TIMESTAMP}: Server XXX successfully ran a local backup.\nBoth rsync & mysqldump report success."| mail -s "Backup Success, XXX" info@carawebs.com

    # rsync worked but there was at least one mysqldump error
    # --------------------------------------------------------------------------
    else
      echo "PARTIAL SUCCESS. File backup (rsync) was successful, but mysqldump reports errors: ${TIMESTAMP}" >> /var/log/server-backup.log
      #echo -e "${TIMESTAMP}: Server XXX ran a local backup.\nFile backup reports success, however mysqldump reports at least one problem.\nCheck "| mail -s "Backup Success, XXX" info@caraw$

  fi

fi

rm -f $STORAGE/current/*
ln -s $TRG $STORAGE/current
