#!/bin/bash
# Backup the current user's home directory to a storage drive.
# ------------------------------------------------------------------------------
if [[ -z $1 ]]; then
  CURRENT_USER=$USER;
else
  CURRENT_USER=$1
fi

# Set config variables and make directories/symlinks
# ------------------------------------------------------------------------------
function setup {
  THIS=$(readlink -f ${BASH_SOURCE[0]})
  PROJECT_DIR=$(dirname $THIS)
  . "$PROJECT_DIR/config"
  EXCLUDE_LIST="/home/$CURRENT_USER/.backup-settings/exclude-home-backup"
  RETAIN_NUMBER=8 # Remember to account for n+1 and the `current` dir
  SRC="/home/$CURRENT_USER/" # The source for rsync
  TIMESTAMP=$(date "+%Y-%m-%d-%H:%M:%S") # Timestamp for directory name
  STORAGE="${PARENT}/home/$CURRENT_USER/backup" # The storage directory
  LOGS="${STORAGE}/rsync-logs"
  LOGFILE="${LOGS}/${TIMESTAMP}"
  TRG="${STORAGE}/${TIMESTAMP}" # The target directory
  LNK="${STORAGE}/current" # The link destination directory: Used to compare changes

  # Check Storage Drive is mounted - if it isn't mount it
  if grep -qs ${PARENT} /proc/mounts; then
    MOUNTED=true
    notify-send "Storage Drive is mounted. Backing up ${SRC} to ${TRG}"
  else
    MOUNTED=false
    notify-send "Storage Drive is not mounted. Mounting..."
    sudo mkdir -p "${STORAGE}"
    sudo mount /dev/disk/by-uuid/$UUID "${STORAGE}"
  fi

  mkdir -p $STORAGE # Backup directory
  mkdir -p $LOGS # Rsync logs stored here
  mkdir -p $TRG # Final backup location, subdir of $STORAGE
  mkdir -p $LNK # The comparison directory used as the rsync `--link-dest`
}

function transfer_files {
  echo "Backup Home Directory Rsync Report" >> ${LOGFILE}
  echo "==================================" >> ${LOGFILE}
  echo "Time: ${TIMESTAMP}" >> ${LOGFILE}
  echo "Computer: ${HOSTNAME}" >> ${LOGFILE}
  echo "Rsync --link-dest: ${LNK}" >> ${LOGFILE}
  echo "----------------------------------" >> ${LOGFILE}
  # --exclude-from=${EXCLUDE_LIST} --stats
  # OPT=(-avL --delete --link-dest=${LNK})
  OPT=(-rltDv --exclude-from=${EXCLUDE_LIST} --link-dest=${LNK})
  rsync "${OPT[@]}" ${SRC} ${TRG} 2>&1 >> ${LOGFILE}
}

# Remove the symlink to the target directory from `$STORAGE/current` and add a
# symlink to the most recent copied directory to `$STORAGE/current`.This allows
# rsync to use the most recent backup as the `--link-dest` comparison on the
# next run. See: http://stackoverflow.com/a/34862475
# ------------------------------------------------------------------------------
function setup_for_next_run {
  rm -rf $STORAGE/current
  ln -s $TRG $STORAGE/current
}

# Retains n directories. Set `$RETAIN_NUMBER` in the config area of this script.
# ------------------------------------------------------------------------------
function delete_oldest_n_copies {
  cd $STORAGE
  # Dry Run: Enable next line
  # ls -cpr $STORAGE | head -n +$RETAIN_NUMBER | xargs -d '\n' echo rm -rf --
  ls -cpr $STORAGE | head -n -$RETAIN_NUMBER | xargs -d '\n' rm -rf
}

function start_message {
  export DISPLAY=:0
  export XAUTHORITY=~/.Xauthority
  notify-send "Starting a Backup. Get Ready!"
}

function finish_message {
  export DISPLAY=:0
  export XAUTHORITY=~/.Xauthority
  notify-send "Backup Finished."
}

start_message
setup
transfer_files
setup_for_next_run
delete_oldest_n_copies
finish_message
